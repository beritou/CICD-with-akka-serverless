name: Node.js CI
on:
  push:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm ci
      - run: npm run build --if-present
      - run: npm test
        env:
          CI: true

  deploy:
    needs: [test]
    runs-on: ubuntu-latest
    env:
      PERSON_VERSION: $(node -p "require('./package').version")
    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - run: docker build . -t beritou/person:${{ env.PERSON_VERSION }}
      - name: Docker Login
        uses: docker/login-action@v1.10.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/person:${{ env.PERSON_VERSION }}
      - run: wget https://downloads.akkaserverless.com/stable/akkasls_linux_amd64.tar.gz
      - run: tar -xzf akkasls_linux_amd64.tar.gz
      - run: sudo mv akkasls /usr/local/bin
      - run: akkasls config set refresh-token ${{ secrets.AKKASLS_TOKEN }}
      - name: Hardcoded Deploy
        uses: retgits/akkasls-action@v2
        with:
          cmd: "services deploy person ${{ secrets.DOCKERHUB_USERNAME }}/person:0.0.9"
        env:
          token: ${{ secrets.AKKASLS_TOKEN }}
          project: ${{ secrets.AKKASLS_PROJECT_ID }}
      # - run: akkasls config set project ${{ secrets.AKKASLS_PROJECT_ID }}
      # - run: akkasls service deploy person ${{ secrets.DOCKERHUB_USERNAME }}/person:${{ env.PERSON_VERSION }}
